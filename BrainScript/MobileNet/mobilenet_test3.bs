#
# MobileNet_test3 network define
# for resize CIFAR-10 224 x 224
# 
#

DwConvLayer {inChannels, outChannels, strideDepthwise, bnTimeConst} = Sequential (
    GroupConvolutionalLayer {inChannels, inChannels, inChannels, (3:3), init="heNormal", stride = strideDepthwise, pad = true, bias=false} :
    BatchNormalizationLayer {spatialRank = 2, normalizationTimeConstant = bnTimeConst, useCntkEngine = false, initialScale = 1} :
    ReLU :
    ConvolutionalLayer {outChannels, (1:1), init = "heNormal", stride = 1, pad = false, bias = false} :
    BatchNormalizationLayer {spatialRank = 2, normalizationTimeConstant = bnTimeConst, useCntkEngine = false, initialScale = 1} :
    ReLU
)


ConvBNLayer {num_filters, filter_size, strides=1, pad=true, bnTimeConst=4096, init=he_normal()} = Sequential (
    ConvolutionalLayer {num_filters, (3:3), init = "heNormal", stride = strides, pad = true, bias = false} :
    BatchNormalizationLayer {spatialRank = 2, normalizationTimeConstant = bnTimeConst, useCntkEngine = false, initialScale = 1} :
    ReLU
)



NLayerStack {n, c} = Sequential (array[0..n-1] (c))
DwConvLayerStack {n, inChannels, outChannels, strideDw, bnTimeConst} = NLayerStack {n, i => DwConvLayer {inChannels, outChannels, strideDw, bnTimeConst}}


mobilenet_test3(input, labelDim, bnTimeConst) = Sequential(
    ConvBNLayer {32, (3:3), strides = 2, pad = true} :

    DwConvLayer {32, 64, 1, bnTimeConst} :
    DwConvLayer {64, 128, 2, bnTimeConst} :
    DwConvLayer {128, 128, 1, bnTimeConst} :
    DwConvLayer {128, 256, 2, bnTimeConst} :
    DwConvLayer {256, 256, 1, bnTimeConst} :
    DwConvLayer {256, 512, 2, bnTimeConst} :

    DwConvLayerStack {5, 512, 512, 1, bnTimeConst} :

    DwConvLayer {512, 1024, 2, bnTimeConst} :
    DwConvLayer {1024, 1024, 1, bnTimeConst} :

    AveragePoolingLayer {(7: 7), stride = 1} :

    LinearLayer {labelDim, init = 'normal'}   

)

